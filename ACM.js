console.info('ACM Producer');
/**
 * Hi, 欢迎来到js小课堂，今天我们要用30分钟的时间学会js的略微进阶语法。
 * 本文是给那些有些许编程基础的人使用的，他们有着最多能写到if和for的程度的能力。
 * 
 * 我们从一个项目开始学习：ACM，它是英国的一个乘法算法，效果类似如下
 *          +---------------+
 *          |   3   4   5   |
 *          | +---+---+---+ |
 *          | |1 /|2 /|2 /| |
 *          | | / | / | / |5|
 *          |1|/ 5|/ 0|/ 5| |
 *          | +---+---+---+ |
 *          |/|1 /|2 /|3 /| |
 *          | | / | / | / |6|
 *          |9|/ 8|/ 4|/ 0| |
 *          | +---+---+---+ |
 *          |/ 3 / 2 / 0    |
 *          +---------------+
 * 
 * First of all. 我们来看看js是怎么输出控制台的。
 * 最上面这句神奇的话相当于 System.out.print(".......\n");
 * 相当于 cout<<"......"<<endl;
 * printline(".......")
 * printf("......");
 * 
 * ************************************************。
 * 
 * 很遗憾的是，实际应用中很少使用控制台来输入数据，所以我们预先设定好了一些值。
*/
var input = [7580, 567];
/**
 * 看到了吗！！上面的语法结构十分复杂，
 * 它由5部分组成！
 * 分别是var, 名字, 赋值号, 赋值的内容，分号。
 * 看第一个单词叫 var，
 * js中的var，就是上帝，祂能创造一切！一切!所有的所有！
 * 在这里，它用 input 这个名字，创生出了一个数组，
 * 数组使用[]框起来，里面的内容就是数组的内容，
 * 数组数组，顾名思义，就是一些数据的抱团现象，
 * 当我们想获得他们的值的时候，
 * 只需要叫编号就行了。
 * 比如，input[0] === 7580
 * 
 * 那么我们回到正题，
 * 原题中把数字的每一个值都给分开来了，那就意味着我们要把每个数字都分开来储存到一个数组中，
 * 并且把这些数组放在一个更大的数组中，
 * 如下：
 */
var buffer = [input[0].toString(),              //buffer[0]是第一个数字的字符串形式,可以用buffer[0][0]获取这个字符串的第一位,buffer[0].length就是这个数字的位数.
            input[1].toString(),                //buffer[1]同理
            (input[0] * input[1]).toString()];  //buffer[2]是答案的字符串形式，用来最后作弊
/**
 * 接下来的内容我们要了解函数，
 * 函数相当于冗杂的代码中，一些可以概念化、模块化，或者是重复使用的程序块，比如(a,b已知)：
 *          var c = a + b;
 * 和
 *          var c = add(a, b);
 *          function add(c, d){return c + d;}
 * 和
 *          var c, add = function(a, b){c = a + b;};
 *          add();
 * 和
 *          var c = function(){c = a + b};
 *          c();
 * 是等价的。
 * 上面4个例子浓缩了一些东西，你可以后期慢慢品味。
 * 
 * 好了接下来基本上你就可以去写真正的代码了，但我们先把我们的话题讲完。
 * 
 * ************************************************
 * 
 * 在这个问题中，我们的思路可以是这样：
 * 1.把答案算出来备用，
 * 2.我们把第一行和第二行做好，
 * 3.第三行起到倒数第三行，我们可以分为两步来思考：
 *  3.1 我们将里面的这张表做好，
 *  3.2 最后将左右两边给加上，
 * 4.把最后两行显示出来
 * 
 * 这个问题最难的是显示位置，
 * 但很明显，显示输出是最简单的事情，我们一步步来。
 * 
 * ************************************************
 */
var outmap = [ ];//每一行所有的内容都在这个地方储存，后面我会介绍怎么向这个数组添加内容。
var mainProcess = function() {//主函数


    /**
     * 这就是我们的第二步。
     * 你说第一步哪里去了？翻回去看看buffer数组。
     * 首先我们可以把第一行分解成一个"+"加上很多个"----",最后再加上一个"---+",这是小学的植树问题，我们快速略过。
     * 写出第一行( l1储存第一行和最后一行)，预期效果：
     * 
     *          +-------------------+
     *          ^   ^   ^   ^   ^   ^
     * 很简单对吧，下面我们开始：
     */
    var l1 = '+';//这里是我们的第一个"+"
    for (var i = 0; i < buffer[0].length; i ++) {//我们使用一个for循环来给这个字符串增加长度
        l1 += '----';// += 运算符还记得吗？
    }
    l1 += '---+';//最后再补上
    outmap.push(l1);//这个push函数就是把括号里的值当作outmap数组的新元素来储存并且自动编号，很方便吧？
    
    /**来了，这是要打印数字(第二行)啊，相同的，分成"|   "和数个(<数字>+"   ")块来思考。预期效果：
     *
     *          |   7   5   8   0   |
     *          ^   ^   ^   ^   ^   ^
     * 这里有一点难度了，要细心思考怎么提取每个数字：
     */
    var l2 = '|   ';
    for (var i = 0; i < buffer[0].length; i ++) {//第一个数的位数
        l2 += input[0].toString()[i] + '   ';//数字加空格
    }
    l2 += '|';//最后再补上杠杠
    outmap.push(l2);//推♂入
    
    /**
     * 好了，我们的第二步已经结束了，接下来我们准备把里面的那个表格给做出来。
     * 下面就是一个典型的函数使用方法：
     */
    initMap();//这个函数在很下面，自个儿去找找
    insertMap();//这个函数也在很下面，自个儿去找找
    
    //parse Ans (buffer[2]), 把答案变成数组，比如12345=>[" "/*注意这里是空格*/,"1","2","3","4","5"]，一共(A的位数+B的位数)位，拿来排列外框
    var inservedAns = [ ];
    var ocur = 0;
    for(var o = buffer[0].length + buffer[1].length - 1; o >= 0; o --) {
        inservedAns[o] = buffer[2][buffer[2].length - 1 - ocur] || ' ';
        ocur ++;
    }
    
    //外框框~~和他们的朋友们，从第3行到倒数第三行的全部内容
    for (var m = 0; m < map.length; m ++) {
        outmap.push(  '|'//-------------------------------------------------------------------------------先是一个 | 杠杠
                    + ( m % 4 == 3 ? inservedAns[(m - 3) / 4] : (m % 4 == 1 && m != 1 ? '/' : ' ') )//====判断第二个字符，是数字，还是"/"，还是空格？
                    + map[m]//----------------------------------------------------------------------------然后把内表的那一行补上
                    + (m % 4 == 2 ? buffer[1][(m - 2) / 4] : ' ')//=======================================判断倒数第二个字符是数字，还是空格？
                    + '|');//-----------------------------------------------------------------------------尾随一个杠杠
    }
    
    //倒数第二行
    var str_2 = "|";
    for(var i = 0; i < buffer[0].length; i ++) {
        str_2 += "/ " + inservedAns[buffer[1].length + i] + " ";
    }
    str_2 += "   |";
    outmap.push(str_2);

    //最后一行
    outmap.push(l1);
};

/**
 * 你找到了!!恭喜!
 * 那么我们开始写内部表格
 * 我们可以这样：
 * 1.生成一个模板，
 * 2.
 */
//内部表格begin
var map = [ ];
var initMap = function() {//初始化一个表格，里面没有数字
/** 就像↓
 * +---+---+---+
 * |  /|  /|  /|
 * | / | / | / |
 * |/  |/  |/  |
 * +---+---+---+
 * |  /|  /|  /|
 * | / | / | / |
 * |/  |/  |/  |
 * +---+---+---+
 * */
    var hr = '+';
    for(var i = 0; i < buffer[0].length; i ++) {// hr君，就是传说中的分割行，很丑，hr = '+' + '---+---+---+';
        hr+='---+';
    }
    map[0] = hr;//第一行是那个很丑陋的 分割行hr君
    var cur = 1;//map的内指针，表明正在cur行准备插入内容
    var m1 = '|', m2='|', m3 = '|';
    for (var i = 0; i<buffer[0].length;i++) {//每三行进行一次制表
        m1+='  /|';
        m2+=' / |';
        m3+='/  |';
    }
    for(var j = 0; j < buffer[1].length; j ++) {
        map[cur] = m1;
        cur ++;
        map[cur] = m2;
        cur ++;
        map[cur] = m3;
        cur ++;
        map[cur] = hr;//然后插入一行'+---+---+---+'
        cur ++;
    }
};
/**接下来我们就要开始替换数字了
 * 这时候我们需要写一个小工具让我们能
 * 把字符串中的某个字符给改掉
 * 就诞生了如下 replacePos()
 */
var replacePos = function(strObj/*字符串内容*/, pos/*位置（下标从0开始计算）*/, replacetext/*替换的内容*/) {//替换字符串中的指定位置的字符的**小工具**
    var str = strObj.substr(0, pos) + replacetext + strObj.substring(pos + 1, strObj.length);
    return str;
};
/**
 * 看上去是不是很简单？
 * 那我们就开始着手替换
 */
var insertMap = function() {//插入数字相乘的结果，各种插入,各种插入,各种插入,各种插入,各种插♂入~~~
    for(var i = 0; i < buffer[0].length; i ++) {
        for(var j = 0; j < buffer[1].length; j ++) {
            /**
             * 在这里我们每4行每4列进行选择
             *             1+4*i   3+4*i
             *          +    -   -   -
             * 1+4*j    |  十位      /
             *          |        /    
             * 3+4*j    |    /      个位
             * 
             * 主要是上面这两个点在替换
             */
          //map[纵坐标] = replacePos(map[纵坐标]/*取字符串*/, 横坐标, 个位或十位);//插入十位数
            map[1 + 4 * j] = replacePos(map[1 + 4 * j], 1 + 4 * i, Math.floor( ( buffer[0][i] * buffer[1][j]) / 10 ) );//插入十位数
            map[3 + 4 * j] = replacePos(map[3 + 4 * j], 3 + 4 * i, (buffer[0][i] * buffer[1][j]) % 10);//插入个位
        }
    }
};
//内部表格end

//我们可以选择直接运行或者是封装
var main = function(){
    mainProcess();
    //
    //---------OUT PUT
    for(var p = 0; p < outmap.length; p++) {
        console.info(outmap[p]);
    }
};
//正式程序开始
main                                   ();

//好了正式程序结束

//当然如果你可以，我们就把这个程序封装成一个模块
var setData = function(a,b){input=[a,b];buffer=[input[0].toString(),input[1].toString(),(input[0] * input[1]).toString()];}
module.exports = {
    ACM:mainProcess,
    setData:setData
};